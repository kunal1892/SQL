 # DQL: Data Query Language - SELECT command/query
-- 1. Subset of SQL that focuses on retrieving /reading data from database
-- 2. Crucial for Data Analysis, Reporting , or Database Management 
--------------------------------------------------------------------------------------------------------------------------------

use day3;
show tables;

use classicmodels;
show tables;


-- ------------------------------------------------------------------------------------------------------------------------------


# Selecting columns


use day3;
select * from myemp;  -- selecting all columns
select emp_id from myemp;  -- select singel column 
select EMP_ID, EMAIL, SALARY from myemp;  -- select multiple columns 
select JOB_ID, EMP_ID, SALARY from myemp;


# Unique results with: DISTINCT clause -- to get unique results from the table

select distinct DEP_ID, JOB_ID from myemp;

-- list of DEP_IDs
select distinct DEP_ID from myemp;

-- list of JOB_ID 
select distinct JOB_ID, MGR_ID from myemp;


# Limiting results with: LIMIT clause -- LIMIT THE NO. RECORDS FETCHED FROM THE TABLE

select * from myemp limit 15;  --  getting only first 15 rows

select EMP_ID, JOB_ID, MGR_ID from myemp limit 20;  -- getting only first 20 rows
select  distinct DEP_ID, MGR_ID from myemp limit 10;

# Sorting Rows with:  ORDER BY [ASC|DESC] Clause

select distinct DEP_ID from myemp order by DEP_ID asc;
select distinct DEP_ID from myemp order by DEP_ID desc;

select EMP_ID, JOB_ID, SALARY from myemp order by SALARY desc;  -- (Higest - Lowest)
select EMP_ID, JOB_ID, SALARY from myemp order by SALARY asc;  -- (lowest - higest)


select EMP_ID, SALARY, COMMISSION_PCT from myemp
order by SALARY desc, COMMISSION_PCT desc;

select EMP_ID, FIRST_NAME from myemp
order by FIRST_NAME desc;


-- display employees hired from recent to newest

select * from myemp order by HIRE_DATE desc;


-- Note:
-- Numeric		-- ASC (lowest - highest)							-- DESC (highest - lowest)
-- String	    -- ASC (starting with 'a' - starting with 'z')		-- DESC (starting with 'z' - starting with 'a')
-- Date/Time	-- ASC (oldest/EARLIEST - newest/LATEST)			-- DESC (newest - oldest)

-- top 5 employees by salarys 
select EMP_ID, SALARY from myemp
order by SALARY desc
limit 5;


-- bottom 5 employees 
select EMP_ID, SALARY from myemp
order by SALARY asc
limit 5;

-- top 10 recently hired employees 
select EMP_ID, HIRE_DATE, EMAIL from myemp
order by HIRE_DATE desc
limit 10;

-- bottom 10 employees 
select EMP_ID, HIRE_DATE, EMAIL from myemp
order by HIRE_DATE asc
limit 10;

select  EMP_ID, commission_pct from myemp
order by commission_pct desc
limit 10;

-- if you want to get top N / bottom N result can be generated by using combination of order by & limit 

-- employee with 2nd higest salary

select EMP_ID, SALARY from myemp
order by SALARY desc
limit 1,1;

-- employee with 5th higest salary

select EMP_ID, SALARY from myemp
order by SALARY desc
limit 4,1;

-- employee with 7th lowest salary

select EMP_ID, SALARY from myemp
order by SALARY asc
limit 6,1;


-- employee with 5th to 10th higest salary 

select EMP_ID, SALARY from myemp
order by SALARY desc
limit 4,6;

-- employee wit 2nd highest commission_pct
select  EMP_ID, commission_pct from myemp
order by commission_pct desc
limit 1,1;

-- 3rd oldest employee
select EMP_ID, HIRE_DATE from myemp
order by HIRE_DATE asc
limit 2,1;

-- top 5 salaries 
select  distinct SALARY from myemp
order by  SALARY desc
limit 5;

# Selecting Specific Columns: Using Alias --> TEMPORARY/DISPLAY NAME GIVEN TO COLUMN OR A TABLE

# Selecting derived Columns: Using Alias
-- -----------------------------------------------------------------------------------------------------------------------------
#  Selecting Specific Rows/Filtering: WHERE clause
use day3;
# Where Clause : Comperision operators ( >,>=,<,<=,<> )

-- employee with salary grater than 15k
select * from myemp
where salary > 15000;

-- employee with salary less than 15k
select * from myemp
where salary < 15000;

-- employee with salary almost 10k almost = maximum ( <= )
select * from myemp
where salary <= 10000;

-- employee with salary at least 10k  atleast = minimum ( >= )
select * from myemp
where salary >= 10000;

-- employee with salary 10k
select * from myemp
where salary = 10000;

-- employee with salary not equal 10k
select * from myemp
where salary != 10000;

-- employee with salary not equal 10k
select * from myemp
where salary <> 10000;

-- employees working in dept 80
select * from myemp
where dep_id = 80;

-- employees working as IT_PROG
select * from myemp
where JOB_ID = 'IT_PROG';

-- employees not working as IT_PROG
select * from myemp
where JOB_ID != 'IT_PROG';

select * from myemp
where JOB_ID <> 'IT_PROG';


# WHERE clause: BETWEEN Operator

-- employees salary between 10k & 20k
select * from myemp
where salary between 10000 and 20000;

# WHERE clause:  LIKE Operator/NOT LIKE Operator
-- employees with names starting with 'a'
select * from myemp 
where first_name like 'a%';

-- employees with names starting with 'j'
select * from myemp 
where first_name like 'j%';

-- first_name ending with 'a'
select * from myemp 
where first_name like '%a';

-- first_name of 5 characters
select * from myemp 
where first_name like '_____';

-- job_id  satrting with 'SA'
select * from myemp 
where job_id like 'sa%';


-- working as not Accountant
select * from myemp 
where job_id not like '%account%';

-- working as  cleark 
select * from myemp 
where Job_id like '%clerk%';

-- working as not cleark 
select * from myemp 
where Job_id not like '%clerk%';


# WHERE clause: AND Operator > select rows that satisfy two conditions

-- employees salary > 8k and commission >0
select * from myemp 
where salary > 8000 and commission_pct > 0;

-- job_id as it_prog and salary > 5k 
select * from myemp
where job_id = 'it_prog' and salary > 5000;

-- -- job_id contaioning 'SA' and commission > 0.2
select * from myemp 
where job_id like '%sa%' and commission_pct > 0.2;

-- name starting with 'a' and commission > 0
select * from myemp 
where first_name like 'a%' and commission_pct > 0;


# WHERE clause: OR Operator > select rows that satisfy either of two conditions

-- employees job_id as it_prog or salary grater than 10k
select * from myemp 
where job_id = 'It_prog' or salary > 10000;

-- employee dept 60 or salary <5k 
select * from myemp 
where dep_id = 60 or salary < 5000; 

-- employees working in dept 50 or 60 and having salary > 5k 
select * from myemp 
where (dep_id = 50 or dep_id = 60) and salary > 5000;

-- top 5 employee from dep_id by salary 
select emp_id, salary from myemp
where dep_id = 80 
order by salary desc
limit 5;

-- top 3 employees working as it_prog by salary 
select job_id, salary from myemp 
where job_id = 'It_prog' 
order by salary desc
limit 3;


# WHERE clause: IN Operator/NOT IN Operator
-- employees working in dep_id = 30,60,90
select dep_id, emp_id, email, job_id
from myemp
where dep_id in (30,60,90)
order by dep_id asc;

-- OR operator 
select dep_id, emp_id, email, job_id
from myemp
where dep_id= 30 or dep_id=60 or dep_id=90
order by dep_id asc;


-- empolyees with it_prog , ad_vp as job_id
select emp_id, job_id, salary 
from myemp
where job_id in ('it_prog', 'ad_vp');

-- employees not working in it_prog & ad_vp 
select emp_id, job_id, salary 
from myemp
where job_id not in ('it_prog', 'ad_vp');






# WHERE clause: IS NULL Operator/ IS NOT NULL Operator

-- ----------------------------------------------------------------------------------
# String Functions:
 
# Date Functions:
-- ----------------------------------------------
-- < : before		<= : before and on
-- > : after		>= : after and on
-- ----------------------------------------------

# Home Work
-- 1. Get the PHONE AND ADDRESS of all the city offices in the UK and Japan(using or) (DB : CLASSICMODELS, TABLE: offices) 
-- 2. Get the PHONE AND ADDRESS of all the city offices in the UK and Japan (using in)(DB : CLASSICMODELS, TABLE: offices) 
-- 3. Get the orders which are On hold, disputed or in process (DB : CLASSICMODELS, TABLE: orders)

















